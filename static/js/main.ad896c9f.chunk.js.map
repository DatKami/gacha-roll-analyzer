{"version":3,"sources":["GenshinDataTransform.js","GenshinDataTransform2.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["routine","runs","currentPityRuns","pities","Math","random","GenshinDataTransform","buckets","cumulativeBuckets","data","j","i","run","k","l","push","x","y","App","useState","probability","setProbability","pityLimit","setPityLimit","className","TextField","id","label","value","onChange","e","target","FormControlLabel","control","Checkbox","checked","color","datasets","steppedLine","pointRadius","pointHitRadius","backgroundColor","borderColor","options","title","display","text","fontSize","legend","scales","xAxes","type","position","scaleLabel","labelString","yAxes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"mNAAA,SAASA,IAKR,IAJA,IAAIC,EAAO,EACVC,EAAkB,EAClBC,EAAS,EAEHA,EAAS,GAGf,GAFAF,GAAQ,EACRC,GAAmB,EAChBE,KAAKC,SAAW,MAA4B,KAApBH,EAAwB,CAClD,KAAIE,KAAKC,SAAW,IAOnB,OAAOJ,EALPC,EAAkB,EAClBC,GAAU,EAQb,OAAOF,EAwCOK,MArCf,WAQI,IAPA,IAAIC,EAAU,GACjBC,EAAoB,GAGjBC,EAAO,GAGEC,EAAI,EAAGA,EAAI,MAAOA,EACvBH,EAAQG,GAAK,EACbF,EAAkBE,GAAK,EAI3B,IAAK,IAAIC,EAAI,EAAGA,EAVN,MAUqBA,EAAG,CAC9B,IAAIC,EAAMZ,IACVO,EAAQK,IAAQ,EAELA,EAIf,IAAK,IAAIC,EAAI,EAAGA,GAAK,MAAOA,EACxBL,EAAkBK,GAAKL,EAAkBK,EAAE,GAAKN,EAAQM,GAI5D,IAAK,IAAIC,EAAI,EAAGA,GAAK,MAAOA,EACxBL,EAAKM,KAAK,CACNC,EAAGF,EACHG,EAAGT,EAAkBM,GA1BnB,IA0BkC,MAI5C,OAAOL,GCLIH,I,2BCqBAY,MAtBf,WAAgB,IAAD,EACyBC,mBAAS,IADlC,mBACNC,EADM,KACOC,EADP,OAEqBF,oBAAS,GAF9B,mBAENG,EAFM,KAEKC,EAFL,KAIb,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACC,EAAA,EAAD,CAAWC,GAAG,cAAcC,MAAM,kBAAkBC,MAAOR,EAAaS,SAAU,SAAAC,GAAC,OAAIT,EAAeS,EAAEC,OAAOH,UAC/G,kBAACI,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CAAUR,GAAG,YAAaS,QAASb,EAAWO,SAAU,SAAAC,GAAC,OAAIP,EAAaO,EAAEC,OAAOI,UAAWC,MAAM,YAEtGT,MAAM,gCAER,kBAAC,OAvDA,CACLlB,KAAM,CACJ4B,SAAU,CAAC,CACTC,aAAa,EACbC,YAAa,EACbC,eAAgB,EAEhB/B,KAAMH,IACNmC,gBAAiB,sBACjBC,YAAa,yBAGjBC,QAAS,CACPC,MAAO,CACLC,SAAS,EACTC,KAAM,+DACNC,SAAU,IAEZC,OAAQ,CACNH,SAAS,GAEXI,OAAQ,CACNC,MAAO,CAAC,CACNC,KAAM,SACNC,SAAU,SACVC,WAAY,CACVR,SAAS,EACTS,YAAa,qBAGjBC,MAAO,CAAC,CACNF,WAAY,CACVR,SAAS,EACTS,YAAa,uCC/BLE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,6EEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.ad896c9f.chunk.js","sourcesContent":["function routine() {\r\n\tlet runs = 0,\r\n\t\tcurrentPityRuns = 0,\r\n\t\tpities = 0;\r\n\t\t\r\n\twhile (pities < 2) {\r\n\t\truns += 1;\r\n\t\tcurrentPityRuns += 1;\r\n\t\tif(Math.random() < .006 || currentPityRuns === 90) {\r\n\t\t\tif (Math.random() < .5) {\r\n\t\t\t\t// no good\r\n\t\t\t\tcurrentPityRuns = 0;\r\n\t\t\t\tpities += 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// we won!\r\n\t\t\t\treturn runs; \r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn runs;\r\n}\r\n\r\nfunction GenshinDataTransform() {\r\n    let buckets = [],\r\n\tcumulativeBuckets = [],\r\n\tsumRuns = 0,\r\n    numRuns = 100000,\r\n    data = [];\r\n\r\n    // make empty buckets\r\n    for (let j = 0; j < 181; ++j) {\r\n        buckets[j] = 0;\r\n        cumulativeBuckets[j] = 0;\r\n    }\r\n\r\n    // count runs\r\n    for (let i = 0; i < numRuns; ++i) {\r\n        let run = routine();\r\n        buckets[run] += 1;\r\n        \r\n        sumRuns += run;\r\n    }\r\n\r\n    // make cumulative runs\r\n    for (let k = 1; k <= 180; ++k) {\r\n        cumulativeBuckets[k] = cumulativeBuckets[k-1] + buckets[k];\r\n    }\r\n\r\n    // normalize and transform data\r\n    for (let l = 1; l <= 180; ++l) {\r\n        data.push({\r\n            x: l,\r\n            y: cumulativeBuckets[l] / numRuns * 100\r\n        });\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nexport default GenshinDataTransform;","function routine() {\r\n\tlet runs = 0,\r\n\t\tcurrentPityRuns = 0,\r\n\t\tpities = 0;\r\n\t\t\r\n\twhile (pities < 1) {\r\n\t\truns += 1;\r\n\t\tcurrentPityRuns += 1;\r\n\t\tif(Math.random() < .006 || currentPityRuns === 90) {\r\n\t\t\treturn runs; \r\n\t\t}\r\n\t}\r\n\treturn runs;\r\n}\r\n\r\nfunction GenshinDataTransform() {\r\n    let buckets = [],\r\n\tcumulativeBuckets = [],\r\n\tsumRuns = 0,\r\n    numRuns = 100000,\r\n    data = [];\r\n\r\n    // make empty buckets\r\n    for (let j = 0; j < 91; ++j) {\r\n        buckets[j] = 0;\r\n        cumulativeBuckets[j] = 0;\r\n    }\r\n\r\n    // count runs\r\n    for (let i = 0; i < numRuns; ++i) {\r\n        let run = routine();\r\n        buckets[run] += 1;\r\n        \r\n        sumRuns += run;\r\n    }\r\n\r\n    // make cumulative runs\r\n    for (let k = 1; k <= 90; ++k) {\r\n        cumulativeBuckets[k] = cumulativeBuckets[k-1] + buckets[k];\r\n    }\r\n\r\n    // normalize and transform data\r\n    for (let l = 1; l <= 90; ++l) {\r\n        data.push({\r\n            x: l,\r\n            y: cumulativeBuckets[l] / numRuns * 100\r\n        });\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nexport default GenshinDataTransform;","import React, { useState } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { Line } from 'react-chartjs-2';\r\nimport ProbabilityDataTransform from './ProbabilityDataTransform';\r\nimport GenshinDataTransform from './GenshinDataTransform';\r\nimport GenshinDataTransform2 from './GenshinDataTransform2';\r\nimport { TextField, Checkbox, FormControlLabel } from '@material-ui/core';\r\n\r\nfunction chartDataTransform(probability, pityLimit) {\r\n  return {\r\n    data: {\r\n      datasets: [{\r\n        steppedLine: true,\r\n        pointRadius: 0,\r\n        pointHitRadius: 2,\r\n        // data: ProbabilityDataTransform({probability, pityLimit: pityLimit ? 300 : undefined}),\r\n        data: GenshinDataTransform(),\r\n        backgroundColor: 'rgba(0, 127, 0, .5)',\r\n        borderColor: 'rgba(0, 127, 0, .5)'\r\n      }]\r\n    },\r\n    options: {\r\n      title: {\r\n        display: true,\r\n        text: 'Cumulative chance to pull any 5* character from limited wish',\r\n        fontSize: 30\r\n      },\r\n      legend: {\r\n        display: false\r\n      },\r\n      scales: {\r\n        xAxes: [{\r\n          type: 'linear',\r\n          position: 'bottom',\r\n          scaleLabel: {\r\n            display: true,\r\n            labelString: 'Number of pulls',\r\n          }\r\n        }],\r\n        yAxes: [{\r\n          scaleLabel: {\r\n            display: true,\r\n            labelString: 'Cumulative Probability (%)'\r\n          }\r\n        }]\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  const [probability, setProbability] = useState(.7)\r\n  const [pityLimit, setPityLimit] = useState(false)\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <TextField id=\"probability\" label=\"Probability (%)\" value={probability} onChange={e => setProbability(e.target.value)}/>\r\n        <FormControlLabel\r\n          control={\r\n            <Checkbox id=\"pityLimit\"  checked={pityLimit} onChange={e => setPityLimit(e.target.checked) } color=\"primary\"/>\r\n          }\r\n          label=\"Granblue: Will spark target\"\r\n        />\r\n        <Line \r\n          {...chartDataTransform(probability / 100, pityLimit)}\r\n        />\r\n      </header>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}