{"version":3,"sources":["ProbabilityDataTransform.js","GenshinDataTransform.js","GenshinDataTransform2.js","App.js","serviceWorker.js","index.js"],"names":["ProbabilityDataTransform","properties","probability","pityLimit","limit","i","data","remainingProbability","probabilityMultiplier","push","x","y","routine","runs","currentPityRuns","pities","Math","random","GenshinDataTransform","buckets","cumulativeBuckets","j","run","k","l","MODES","DATA_TRANSFORMS","GRANBLUE","FGO","GENSHIN","true","false","GenshinDataTransform2","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","formControlPresetProbabilities","selectEmpty","marginTop","graphBox","width","DEFAULT_PROBABILITIES","name","value","chartTitle","undefined","App","classes","useState","mode","setMode","setProbability","maxRolls","setMaxRolls","presetProbabilityIndex","setPresetProbabilityIndex","probabilityInputEnabled","setProbabilityInputEnabled","setPityLimit","isGenshinLimitedCharacter","setIsGenshinLimitedCharacter","getChartTitle","index","setChartTitle","setToDefaultProbability","preSetProbability","className","FormGroup","row","FormControl","InputLabel","id","Select","labelId","onChange","e","length","preSetMode","target","MenuItem","map","item","TextField","disabled","label","preSetMaxRolls","FormControlLabel","control","Checkbox","checked","color","preSetIsGenshinLimitedCharacter","dataTransform","datasets","lineTension","pointRadius","pointHitRadius","backgroundColor","borderColor","options","title","display","text","fontSize","legend","scales","xAxes","type","position","scaleLabel","labelString","ticks","beginAtZero","suggestedMax","yAxes","chartDataTransform","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.83bff82e.chunk.js","sourcesContent":["function ProbabilityDataTransform(properties) {\r\n    properties = properties || {};\r\n    let {probability, pityLimit} = properties;\r\n    let {limit = 1000} = properties;\r\n    if (!probability) { \r\n        // throw new Error('Parameter probability is required');\r\n        probability = 0;\r\n    }\r\n    let data = [], \r\n        i, \r\n        remainingProbability = 1;\r\n\r\n    const probabilityMultiplier = 1 - probability;\r\n\r\n    for (i = 1; i <= limit; ++i) {\r\n        remainingProbability = remainingProbability * probabilityMultiplier;\r\n        data.push({\r\n            x: i,\r\n            y: (i >= pityLimit ? 1 : 1 - remainingProbability) * 100\r\n        });\r\n    }\r\n    return data;\r\n}\r\n\r\nexport default ProbabilityDataTransform;\r\n","function routine(probability) {\r\n\tlet runs = 0,\r\n\t\tcurrentPityRuns = 0,\r\n\t\tpities = 0;\r\n\t\t\r\n\twhile (pities < 2) {\r\n\t\truns += 1;\r\n\t\tcurrentPityRuns += 1;\r\n\t\tif(Math.random() < probability || currentPityRuns === 90) {\r\n\t\t\tif (Math.random() < .5) {\r\n\t\t\t\t// no good\r\n\t\t\t\tcurrentPityRuns = 0;\r\n\t\t\t\tpities += 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// we won!\r\n\t\t\t\treturn runs; \r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn runs;\r\n}\r\n\r\nfunction GenshinDataTransform(properties) {\r\n    properties = properties || {};\r\n    let {probability} = properties;\r\n\r\n    let buckets = [],\r\n        cumulativeBuckets = [],\r\n        sumRuns = 0,\r\n        numRuns = 100000,\r\n        data = [];\r\n\r\n    if (!probability) { \r\n        // throw new Error('Parameter probability is required');\r\n        probability = 0;\r\n    }\r\n\r\n    // make empty buckets\r\n    for (let j = 0; j < 181; ++j) {\r\n        buckets[j] = 0;\r\n        cumulativeBuckets[j] = 0;\r\n    }\r\n\r\n    // count runs\r\n    for (let i = 0; i < numRuns; ++i) {\r\n        let run = routine(probability);\r\n        buckets[run] += 1;\r\n        \r\n        sumRuns += run;\r\n    }\r\n\r\n    // make cumulative runs\r\n    for (let k = 1; k <= 180; ++k) {\r\n        cumulativeBuckets[k] = cumulativeBuckets[k-1] + buckets[k];\r\n    }\r\n\r\n    // normalize and transform data\r\n    for (let l = 1; l <= 180; ++l) {\r\n        data.push({\r\n            x: l,\r\n            y: cumulativeBuckets[l] / numRuns * 100\r\n        });\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nexport default GenshinDataTransform;","function routine(probability) {\r\n\tlet runs = 0,\r\n\t\tcurrentPityRuns = 0,\r\n\t\tpities = 0;\r\n\t\t\r\n\twhile (pities < 1) {\r\n\t\truns += 1;\r\n\t\tcurrentPityRuns += 1;\r\n\t\tif(Math.random() < probability || currentPityRuns === 90) {\r\n\t\t\treturn runs; \r\n\t\t}\r\n\t}\r\n\treturn runs;\r\n}\r\n\r\nfunction GenshinDataTransform(properties) {\r\n    properties = properties || {};\r\n    let {probability} = properties;\r\n\r\n    let buckets = [],\r\n        cumulativeBuckets = [],\r\n        sumRuns = 0,\r\n        numRuns = 100000,\r\n        data = [];\r\n\r\n    if (!probability) { \r\n        // throw new Error('Parameter probability is required');\r\n        probability = 0;\r\n    }\r\n\r\n    // make empty buckets\r\n    for (let j = 0; j < 91; ++j) {\r\n        buckets[j] = 0;\r\n        cumulativeBuckets[j] = 0;\r\n    }\r\n\r\n    // count runs\r\n    for (let i = 0; i < numRuns; ++i) {\r\n        let run = routine(probability);\r\n        buckets[run] += 1;\r\n        \r\n        sumRuns += run;\r\n    }\r\n\r\n    // make cumulative runs\r\n    for (let k = 1; k <= 90; ++k) {\r\n        cumulativeBuckets[k] = cumulativeBuckets[k-1] + buckets[k];\r\n    }\r\n\r\n    // normalize and transform data\r\n    for (let l = 1; l <= 90; ++l) {\r\n        data.push({\r\n            x: l,\r\n            y: cumulativeBuckets[l] / numRuns * 100\r\n        });\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nexport default GenshinDataTransform;","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ProbabilityDataTransform from './ProbabilityDataTransform';\r\nimport GenshinDataTransform from './GenshinDataTransform';\r\nimport GenshinDataTransform2 from './GenshinDataTransform2';\r\n// FormHelperText,\r\nimport { TextField, Checkbox, FormControlLabel, InputLabel, MenuItem, FormControl, Select, FormGroup } from '@material-ui/core';\r\n\r\nconst MODES = {\r\n        GRANBLUE: 'GRANBLUE',\r\n        FGO: 'FGO',\r\n        GENSHIN: 'GENSHIN'\r\n      },\r\n      DATA_TRANSFORMS = {\r\n        GRANBLUE: ProbabilityDataTransform,\r\n        FGO: ProbabilityDataTransform,\r\n        GENSHIN: {\r\n            true: GenshinDataTransform,\r\n            false: GenshinDataTransform2\r\n        }\r\n      },\r\n      useStyles = makeStyles((theme) => ({\r\n          formControl: {\r\n              margin: theme.spacing(1),\r\n              minWidth: 120,\r\n          },\r\n          formControlPresetProbabilities: {\r\n              margin: theme.spacing(1),\r\n              minWidth: 240,\r\n          },\r\n          selectEmpty: {\r\n              marginTop: theme.spacing(2),\r\n          },\r\n          graphBox: {\r\n              width: '80vw',\r\n          }\r\n      })),\r\n      DEFAULT_PROBABILITIES = {\r\n          GRANBLUE: [\r\n              {\r\n                  name: '0.225% - 1 of 3 SSRs in rate up',\r\n                  value: 0.225,\r\n                  chartTitle: 'Cumulative chance to pull a focused SSR at 0.225% rate'\r\n              },\r\n              {\r\n                  name: '0.45% - 2 SSRs in rate up',\r\n                  value: 0.45,\r\n                  chartTitle: 'Cumulative chance to pull a focused SSR at 0.45% rate'\r\n              },\r\n              {\r\n                  name: '0.7% - 1 SSR in rate up',\r\n                  value: 0.7,\r\n                  chartTitle: 'Cumulative chance to pull a focused SSR at 0.7% rate'\r\n              },\r\n              {\r\n                  name: '3% - Any SSR',\r\n                  value: 3,\r\n                  chartTitle: 'Cumulative chance to pull any SSR at 3% rate'\r\n              },\r\n              {\r\n                  name: '6% - Any SSR (Flash Gala)',\r\n                  value: 6,\r\n                  chartTitle: 'Cumulative chance to pull any SSR at 6% rate'\r\n              },\r\n              {\r\n                  name: 'Custom',\r\n                  value: undefined,\r\n                  chartTitle: 'Cumulative chance at a custom rate'\r\n              }\r\n          ],\r\n          FGO: [\r\n              {\r\n                  name: '0.7% - 5* Servant Rate Up',\r\n                  value: 0.7,\r\n                  chartTitle: 'Cumulative chance to pull a focused 5* servant at 0.7% rate'\r\n              },\r\n              {\r\n                  name: '1% - Any 5* Servant',\r\n                  value: 1,\r\n                  chartTitle: 'Cumulative chance to pull any 5* servant at 1% rate'\r\n              },\r\n              {\r\n                  name: 'Custom',\r\n                  value: undefined,\r\n                  chartTitle: 'Cumulative chance at a custom rate'\r\n              }\r\n          ],\r\n          GENSHIN: [\r\n              {\r\n                  name: '0.6% - 5* Any',\r\n                  value: 0.6,\r\n                  chartTitle: {\r\n                      false: 'Cumulative chance to pull any 5* character from limited wish',\r\n                      true: 'Cumulative chance to pull the rate up 5* character from limited wish'\r\n                  }\r\n              },\r\n              {\r\n                  name: 'Custom',\r\n                  value: undefined,\r\n                  chartTitle: {\r\n                    false: 'Cumulative chance at a custom rate',\r\n                    true: 'Cumulative chance to pull the rate up 5* character at a custom rate'\r\n                }\r\n              }\r\n          ]\r\n      }\r\n\r\nfunction chartDataTransform(probability, pityLimit, isGenshinLimitedCharacter, mode, chartTitle, maxRolls) {\r\n  let dataTransform = DATA_TRANSFORMS[mode],\r\n      properties = {probability, limit: maxRolls}\r\n\r\n  if (mode === MODES.GENSHIN) {\r\n      dataTransform = dataTransform[isGenshinLimitedCharacter]\r\n  }\r\n  if (mode === MODES.GRANBLUE) {\r\n      properties.pityLimit = pityLimit ? 300 : undefined\r\n  }\r\n\r\n  return {\r\n    data: {\r\n      datasets: [{\r\n        lineTension: 0,\r\n        pointRadius: 0,\r\n        pointHitRadius: 2,\r\n        data: dataTransform(properties),\r\n        backgroundColor: 'rgba(0, 127, 0, .5)',\r\n        borderColor: 'rgba(0, 127, 0, .5)'\r\n      }]\r\n    },\r\n    options: {\r\n      title: {\r\n        display: true,\r\n        text: chartTitle,\r\n        fontSize: 26\r\n      },\r\n      legend: {\r\n        display: false\r\n      },\r\n      scales: {\r\n        xAxes: [{\r\n          type: 'linear',\r\n          position: 'bottom',\r\n          scaleLabel: {\r\n            display: true,\r\n            labelString: 'Number of pulls',\r\n          },\r\n          ticks: {\r\n            beginAtZero: true,\r\n            suggestedMax: maxRolls\r\n          }\r\n        }],\r\n        yAxes: [{\r\n          scaleLabel: {\r\n            display: true,\r\n            labelString: 'Cumulative Probability (%)'\r\n          },\r\n          ticks: {\r\n            beginAtZero: true,\r\n            suggestedMax: 100\r\n          }\r\n        }]\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [mode, setMode] = useState(MODES.GENSHIN)\r\n  const [probability, setProbability] = useState(DEFAULT_PROBABILITIES[mode][0].value)\r\n  const [maxRolls, setMaxRolls] = useState(300)\r\n  const [presetProbabilityIndex, setPresetProbabilityIndex] = useState(0)\r\n  const [probabilityInputEnabled, setProbabilityInputEnabled] = useState(false)\r\n  const [pityLimit, setPityLimit] = useState(true)\r\n  const [isGenshinLimitedCharacter, setIsGenshinLimitedCharacter] = useState(true)\r\n  const getChartTitle = (mode, index, isGenshinLimitedCharacter) => {\r\n      let chartTitle = DEFAULT_PROBABILITIES[mode][index].chartTitle\r\n\r\n      if (mode === MODES.GENSHIN) {\r\n          chartTitle = chartTitle[isGenshinLimitedCharacter]\r\n      }\r\n      \r\n      return chartTitle\r\n  }\r\n  const [chartTitle, setChartTitle] = useState(getChartTitle(mode, presetProbabilityIndex, isGenshinLimitedCharacter))\r\n  const setToDefaultProbability = (mode, index) => {\r\n      const presetProbability = DEFAULT_PROBABILITIES[mode][index],\r\n            probability = presetProbability.value\r\n\r\n      if (probability === undefined) {\r\n          setProbabilityInputEnabled(true)\r\n      } else {\r\n          setProbability(probability)\r\n          setProbabilityInputEnabled(false)\r\n      }\r\n\r\n      setChartTitle(getChartTitle(mode, index, isGenshinLimitedCharacter))\r\n  }\r\n  const preSetProbability = index => {\r\n      setPresetProbabilityIndex(index)\r\n      setToDefaultProbability(mode, index)\r\n  }\r\n  const preSetMode = mode => {\r\n      setMode(mode)\r\n      let index = 0\r\n      if (mode === MODES.FGO) {\r\n          setPityLimit(false)\r\n      }\r\n      if (mode === MODES.GRANBLUE) {\r\n          setPityLimit(true)\r\n      }\r\n      if (mode !== MODES.GENSHIN) {\r\n          setIsGenshinLimitedCharacter(false)\r\n      } \r\n      if (!probabilityInputEnabled) {\r\n          preSetProbability(index)\r\n          setToDefaultProbability(mode, index)\r\n      } else {\r\n          index = DEFAULT_PROBABILITIES[mode].length - 1\r\n          setPresetProbabilityIndex(index)\r\n          setToDefaultProbability(mode, index) // custom index\r\n      }\r\n  }\r\n  const preSetIsGenshinLimitedCharacter = isGenshinLimitedCharacter => {\r\n      setIsGenshinLimitedCharacter(isGenshinLimitedCharacter)\r\n      let chartTitleObject = DEFAULT_PROBABILITIES[mode][presetProbabilityIndex].chartTitle,\r\n          chartTitle = chartTitleObject[isGenshinLimitedCharacter]\r\n      \r\n      setChartTitle(chartTitle)\r\n  }\r\n  const preSetMaxRolls = maxRolls => {\r\n      if (maxRolls > 1000) {\r\n          maxRolls = 1000\r\n      }\r\n\r\n      setMaxRolls(maxRolls)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <FormGroup row={true}>\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"modesInputLabel\">Game</InputLabel>\r\n                <Select\r\n                  labelId=\"modesLabel\"\r\n                  id=\"modes\"\r\n                  value={mode}\r\n                  onChange={e => preSetMode(e.target.value)}\r\n                >\r\n                    <MenuItem value={MODES.GRANBLUE}>Granblue Fantasy</MenuItem>\r\n                    <MenuItem value={MODES.FGO}>Fate Grand Order</MenuItem>\r\n                    <MenuItem value={MODES.GENSHIN}>Genshin Impact</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n            <FormControl className={classes.formControlPresetProbabilities}>\r\n                <InputLabel id=\"presetProbabilitiesInputLabel\">Preset Probabilities</InputLabel>\r\n                <Select\r\n                  labelId=\"presetProbabilitiesLabel\"\r\n                  id=\"presetProbabilities\"\r\n                  value={presetProbabilityIndex}\r\n                  onChange={e => preSetProbability(e.target.value)}\r\n                >\r\n                    {DEFAULT_PROBABILITIES[mode].map((item, index) => \r\n                        <MenuItem value={index}>{item.name}</MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n            <TextField disabled={!probabilityInputEnabled} className={classes.formControl} id=\"probability\" label=\"Probability (%)\" value={probability} onChange={e => setProbability(e.target.value)}/>\r\n        </FormGroup>\r\n        <FormGroup row={true}>\r\n            <TextField className={classes.formControl} id=\"maxRolls\" label=\"Max rolls (max 1000)\" value={maxRolls} onChange={e => preSetMaxRolls(e.target.value)}/>\r\n            {mode === MODES.GRANBLUE &&\r\n                <FormControlLabel className={classes.formControl}\r\n                    control={\r\n                        <Checkbox id=\"pityLimit\" checked={pityLimit} onChange={e => setPityLimit(e.target.checked) } color=\"primary\"/>\r\n                    }\r\n                    label=\"Will spark target (Guaranteed after 300 rolls)\"\r\n                />\r\n            }\r\n            {mode === MODES.GENSHIN &&\r\n                <FormControlLabel className={classes.formControl}\r\n                    control={\r\n                        <Checkbox id=\"isGenshinLimitedCharacter\" checked={isGenshinLimitedCharacter} onChange={e => preSetIsGenshinLimitedCharacter(e.target.checked) } color=\"primary\"/>\r\n                    }\r\n                    label=\"Aiming for Limited 5* Character\"\r\n                />\r\n            }\r\n\r\n        </FormGroup>\r\n        <div className={classes.graphBox}>\r\n            <Line \r\n                {...chartDataTransform(probability / 100, pityLimit, isGenshinLimitedCharacter, mode, chartTitle, maxRolls)}\r\n            />\r\n        </div>\r\n\r\n      </header>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}